/**
 * phpSPA JavaScript Engine
 *
 * A lightweight JavaScript engine for PHP-powered single-page applications.
 * Handles SPA-style navigation, content replacement, and lifecycle events
 * without full page reloads. Designed to pair with the `phpSPA` PHP framework.
 *
 * Features:
 * - `phpspa.navigate(url, state = "push")`: Navigate to a new route via AJAX.
 * - `phpspa.back()` / `phpspa.forward()`: Navigate browser history.
 * - `phpspa.on("beforeload" | "load", callback)`: Lifecycle event hooks.
 * - Auto-replaces DOM target with component content and updates `<title>` and `<meta>`.
 * - Executes inline component scripts marked as `<script data-type="phpspa/script">`.
 * - Built-in scroll position restoration across route changes.
 *
 * Example Usage:
 * ```js
 * phpspa.on("beforeload", ({ route }) => showSpinner());
 * phpspa.on("load", ({ success }) => hideSpinner());
 * phpspa.navigate("/profile");
 * ```
 *
 * Note:
 * - All scripts and logic must be attached per component using `$component->script(...)`.
 * - This library assumes server-rendered HTML responses with placeholder target IDs.
 *
 * @author Dave Conco
 * @version 1.1.5
 * @license MIT
 */
;(function(){window.addEventListener("DOMContentLoaded",()=>{const t=document.querySelector("[data-phpspa-target]");if(t){const e={url:location.href,title:document.title,targetID:t.parentElement.id,content:t.innerHTML};t.hasAttribute("phpspa-reload-time")&&(e.reloadTime=Number(t.getAttribute("phpspa-reload-time"))),history.replaceState(e,document.title,location.href),t.hasAttribute("phpspa-reload-time")&&setTimeout(phpspa.reloadComponent,e.reloadTime)}}),document.addEventListener("click",t=>{const e=t.target.closest('a[data-type="phpspa-link-tag"]');e&&(t.preventDefault(),phpspa.navigate(new URL(e.href,location.href),"push"))}),window.addEventListener("popstate",t=>{const e=t.state;if(e&&e.url&&e.targetID&&e.content){document.title=e.title??document.title;let t=document.getElementById(e.targetID)??document.body;t.innerHTML=e.content,phpspa.runAll(t),void 0!==e.reloadTime&&setTimeout(phpspa.reloadComponent,e.reloadTime)}else phpspa.navigate(new URL(location.href),"replace");history.scrollRestoration="auto"})})();

/**
 * A static class for managing client-side navigation and state in a PHP-powered Single Page Application (SPA).
 * Provides methods for navigation, history manipulation, event handling, and dynamic content updates.
 *
 * @class phpspa
 *
 * @property {Object} _events - Internal event registry for custom event handling.
 * @property {Set} _executedScripts - Track executed scripts to prevent re-execution.
 *
 * @method navigate
 * @static
 * @param {string|URL} url - The URL to navigate to.
 * @param {string} [state="push"] - The history state action ("push" or "replace").
 * @description Fetches content from the given URL using a custom method, updates the DOM, manages history state, and executes inline scripts.
 *
 * @method back
 * @static
 * @description Navigates back in the browser history.
 *
 * @method forward
 * @static
 * @description Navigates forward in the browser history.
 *
 * @method reload
 * @static
 * @description Reloads the current page content via SPA navigation.
 *
 * @method on
 * @static
 * @param {string} event - The event name to listen for.
 * @param {Function} callback - The callback to execute when the event is emitted.
 * @description Registers an event listener for a custom event.
 *
 * @method emit
 * @static
 * @param {string} event - The event name to emit.
 * @param {Object} payload - The data to pass to event listeners.
 * @description Emits a custom event to all registered listeners.
 */
class phpspa{static _events={beforeload:[],load:[]};static navigate(t,e="push"){function o(e){e.response?e.response.text().then(o=>{let a;try{a=o.trim().startsWith("{")?JSON.parse(o):o}catch(t){a=o}phpspa.emit("load",{route:t,success:!1,error:e.message||"Server returned an error",fallbackData:a}),r(a||"")}).catch(()=>{phpspa.emit("load",{route:t,success:!1,error:e.message||"Failed to read error response"}),r("")}):(phpspa.emit("load",{route:t,success:!1,error:e.message||"No connection to server"}),r(""))}function r(o){"string"!=typeof o?.title&&"number"!=typeof o?.title||(document.title=o.title);let r=document.getElementById(o?.targetID)??document.getElementById(history.state?.targetID)??document.body;r.innerHTML=o?.content??o;const a={url:t?.href??t,title:o?.title??document.title,targetID:o?.targetID??r.id,content:o?.content??o};void 0!==o.reloadTime&&(a.reloadTime=o.reloadTime),"push"===e?history.pushState(a,a.title,t):"replace"===e&&history.replaceState(a,a.title,t);let s=document.getElementById(t?.hash?.substring(1));s&&scroll({top:s.offsetTop,left:s.offsetLeft}),phpspa.runAll(r),void 0!==o.reloadTime&&setTimeout(phpspa.reloadComponent,e.reloadTime)}phpspa.emit("beforeload",{route:t}),fetch(t,{headers:{"X-Requested-With":"PHPSPA_REQUEST"},mode:"same-origin",redirect:"follow",keepalive:!0}).then(e=>{e.text().then(e=>{let o;if(e&&e.trim().startsWith("{"))try{o=JSON.parse(e)}catch(t){o=e}else o=e||"";phpspa.emit("load",{route:t,success:!0,error:!1}),r(o)}).catch(t=>o(t))}).catch(t=>o(t))}static back(){history.back()}static forward(){history.forward()}static reload(){this.navigate(new URL(location.href),"replace")}static on(t,e){this._events[t]||(this._events[t]=[]),this._events[t].push(e)}static emit(t,e){const o=this._events[t]||[];for(const t of o)"function"==typeof t&&t(e)}static setState(t,e){return new Promise((o,r)=>{let a={top:scrollY,left:scrollX};const s=new URL(location.href),n=JSON.stringify({stateKey:t,value:e}),i=encodeURI(`${s}?phpspa_body=${n}`);function c(t){t.response?t.response.text().then(t=>{let e;try{e=t.trim().startsWith("{")?JSON.parse(t):t}catch(o){e=t}l(e||"")}).catch(()=>{l("")}):l("")}function l(t){"string"!=typeof t?.title&&"number"!=typeof t?.title||(document.title=t.title),(document.getElementById(t?.targetID)??document.getElementById(history.state?.targetID)??document.body).innerHTML=t?.content??t,scroll(a)}fetch(i,{headers:{"X-Requested-With":"PHPSPA_REQUEST"},mode:"same-origin",redirect:"follow",keepalive:!0}).then(t=>{t.text().then(t=>{let e;if(t&&t.trim().startsWith("{"))try{e=JSON.parse(t)}catch(o){e=t}else e=t||"";o(),l(e)}).catch(t=>{r(t.message),c(t)})}).catch(t=>{r(t.message),c(t)})})}static runAll(t){!function(t){t.querySelectorAll("style[data-type='phpspa/css']").forEach(t=>{const e=document.createElement("style");e.textContent=t.textContent,document.head.appendChild(e).remove()})}(t),function(t){t.querySelectorAll("script[data-type='phpspa/script']").forEach(t=>{const e=document.createElement("script");e.textContent=t.textContent,document.head.appendChild(e).remove()})}(t)}static reloadComponent(){const t={top:scrollY,left:scrollX};function e(t){t.response?t.response.text().then(t=>{let e;try{e=t.trim().startsWith("{")?JSON.parse(t):t}catch(o){e=t}o(e||"")}).catch(()=>{o("")}):o("")}function o(e){"string"!=typeof e?.title&&"number"!=typeof e?.title||(document.title=e.title);let o=document.getElementById(e?.targetID)??document.getElementById(history.state?.targetID)??document.body;o.innerHTML=e?.content??e,phpspa.runAll(o),scroll(t),void 0!==e.reloadTime&&setTimeout(phpspa.reloadComponent,e.reloadTime)}fetch(new URL(location.href),{headers:{"X-Requested-With":"PHPSPA_REQUEST"},mode:"same-origin",redirect:"follow",keepalive:!0}).then(t=>{t.text().then(t=>{let e;if(t&&t.trim().startsWith("{"))try{e=JSON.parse(t)}catch(o){e=t}else e=t||"";o(e)}).catch(t=>{e(t)})}).catch(t=>{e(t)})}static async __call(t,...e){scrollY,scrollX;const o=new URL(location.href),r=JSON.stringify({functionName:t,args:e}),a=encodeURI(`${o}?phpspa_call_php_function=${r}`);try{const t=await fetch(a,{headers:{"X-Requested-With":"PHPSPA_REQUEST"},mode:"same-origin",redirect:"follow",keepalive:!0}),e=await t.text();let o;if(e&&e.trim().startsWith("{"))try{o=JSON.parse(e),o=o.response}catch(t){o=e}else o=e||"";return o}catch(t){if(!t.response)return"";try{const e=await t.response.text();let o;try{o=e.trim().startsWith("{")?JSON.parse(e):e,o=o.response||o}catch(t){o=e}return o}catch{return""}}}}if("function"!=typeof setState)function setState(t,e){return phpspa.setState(t,e)}void 0===window.phpspa&&(window.phpspa=phpspa);