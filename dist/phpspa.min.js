/**
 * phpSPA JavaScript Engine
 *
 * A lightweight JavaScript engine for PHP-powered single-page applications.
 * Handles SPA-style navigation, content replacement, and lifecycle events
 * without full page reloads. Designed to pair with the `phpSPA` PHP framework.
 *
 * Features:
 * - `phpspa.navigate(url, state = "push")`: Navigate to a new route via AJAX.
 * - `phpspa.back()` / `phpspa.forward()`: Navigate browser history.
 * - `phpspa.on("beforeload" | "load", callback)`: Lifecycle event hooks.
 * - Auto-replaces DOM target with component content and updates `<title>` and `<meta>`.
 * - Executes inline component scripts marked as `<script data-type="phpspa/script">`.
 * - Built-in scroll position restoration across route changes.
 *
 * Example Usage:
 * ```js
 * phpspa.on("beforeload", ({ route }) => showSpinner());
 * phpspa.on("load", ({ success }) => hideSpinner());
 * phpspa.navigate("/profile");
 * ```
 *
 * Note:
 * - All scripts and logic must be attached per component using `$component->script(...)`.
 * - This library assumes server-rendered HTML responses with placeholder target IDs.
 *
 * @author Dave Conco
 * @version 1.1.2
 * @license MIT
 */
window.addEventListener("DOMContentLoaded",()=>{const t=document.querySelector("[data-phpspa-target]");if(t){const e={url:location.href,title:document.title,targetID:t.parentElement.id,content:t.innerHTML};history.replaceState(e,document.title,location.href)}}),document.addEventListener("click",t=>{const e=t.target.closest('a[data-type="phpspa-link-tag"]');e&&(t.preventDefault(),phpspa.navigate(new URL(e.href,location.href),"push"))}),window.addEventListener("popstate",t=>{const e=t.state;if(e&&e.url&&e.targetID&&e.content){document.title=e.title??document.title;let t=document.getElementById(e.targetID)??document.body;t.innerHTML=e.content,phpspa.runAll(t)}else phpspa.navigate(new URL(location.href),"replace");history.scrollRestoration="auto"});

/**
 * A static class for managing client-side navigation and state in a PHP-powered Single Page Application (SPA).
 * Provides methods for navigation, history manipulation, event handling, and dynamic content updates.
 *
 * @class phpspa
 *
 * @property {Object} _events - Internal event registry for custom event handling.
 *
 * @method navigate
 * @static
 * @param {string|URL} url - The URL to navigate to.
 * @param {string} [state="push"] - The history state action ("push" or "replace").
 * @description Fetches content from the given URL using a custom method, updates the DOM, manages history state, and executes inline scripts.
 *
 * @method back
 * @static
 * @description Navigates back in the browser history.
 *
 * @method forward
 * @static
 * @description Navigates forward in the browser history.
 *
 * @method reload
 * @static
 * @description Reloads the current page content via SPA navigation.
 *
 * @method on
 * @static
 * @param {string} event - The event name to listen for.
 * @param {Function} callback - The callback to execute when the event is emitted.
 * @description Registers an event listener for a custom event.
 *
 * @method emit
 * @static
 * @param {string} event - The event name to emit.
 * @param {Object} payload - The data to pass to event listeners.
 * @description Emits a custom event to all registered listeners.
 */
class phpspa{static _events={beforeload:[],load:[]};static navigate(t,e="push"){function n(e){e.response?e.response.text().then(n=>{let s;try{s=n.trim().startsWith("{")?JSON.parse(n):n}catch(t){s=n}phpspa.emit("load",{route:t,success:!1,error:e.message||"Server returned an error",fallbackData:s}),o(s||"")}).catch(()=>{phpspa.emit("load",{route:t,success:!1,error:e.message||"Failed to read error response"}),o("")}):(phpspa.emit("load",{route:t,success:!1,error:e.message||"No connection to server"}),o(""))}function o(n){"string"!=typeof n?.title&&"number"!=typeof n?.title||(document.title=n.title);let o=document.getElementById(n?.targetID)??document.getElementById(history.state?.targetID)??document.body;o.innerHTML=n?.content??n;const s={url:t?.href??t,title:n?.title??document.title,targetID:n?.targetID??o.id,content:n?.content??n};"push"===e?history.pushState(s,s.title,t):"replace"===e&&history.replaceState(s,s.title,t);let a=document.getElementById(t?.hash?.substring(1));a&&scroll({top:a.offsetTop,left:a.offsetLeft}),phpspa.runAll(o)}phpspa.emit("beforeload",{route:t}),fetch(t,{method:"PHPSPA_GET",mode:"same-origin",keepalive:!0}).then(e=>{e.text().then(e=>{let n;if(e&&e.trim().startsWith("{"))try{n=JSON.parse(e)}catch(t){n=e}else n=e||"";phpspa.emit("load",{route:t,success:!0,error:!1}),o(n)}).catch(t=>n(t))}).catch(t=>n(t))}static back(){history.back()}static forward(){history.forward()}static reload(){this.navigate(new URL(location.href),"replace")}static on(t,e){this._events[t]||(this._events[t]=[]),this._events[t].push(e)}static emit(t,e){const n=this._events[t]||[];for(const t of n)"function"==typeof t&&t(e)}static setState(t,e){return new Promise((n,o)=>{let s={top:scrollY,left:scrollX};const a=new URL(location.href);function r(t){t.response?t.response.text().then(t=>{let e;try{e=t.trim().startsWith("{")?JSON.parse(t):t}catch(n){e=t}c(e||"")}).catch(()=>{c("")}):c("")}function c(t){"string"!=typeof t?.title&&"number"!=typeof t?.title||(document.title=t.title);let e=document.getElementById(t?.targetID)??document.getElementById(history.state?.targetID)??document.body;e.innerHTML=t?.content??t;const n={url:a?.href??a,title:t?.title??document.title,targetID:t?.targetID??e.id,content:t?.content??t};history.replaceState(n,n.title,a),scroll(s)}fetch(a,{method:"PHPSPA_GET",body:JSON.stringify({stateKey:t,value:e}),mode:"same-origin",redirect:"follow",keepalive:!0}).then(t=>{t.text().then(t=>{let e;if(t&&t.trim().startsWith("{"))try{e=JSON.parse(t)}catch(n){e=t}else e=t||"";n(),c(e)}).catch(t=>{o(t.message),r(t)})}).catch(t=>{o(t.message),r(t)})})}static runAll(t){!function(t){t.querySelectorAll("style[data-type='phpspa/css']").forEach(t=>{const e=document.createElement("style");e.textContent=t.textContent,document.head.appendChild(e).remove()})}(t),function(t){t.querySelectorAll("script[data-type='phpspa/script']").forEach(t=>{const e=document.createElement("script");e.textContent=`(function() {\n${t.textContent}\n})();`,document.head.appendChild(e).remove()})}(t)}}if("function"!=typeof setState)function setState(t,e){return phpspa.setState(t,e)}void 0===window.phpspa&&(window.phpspa=phpspa);